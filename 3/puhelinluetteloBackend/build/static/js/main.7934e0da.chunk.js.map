{"version":3,"sources":["components/Person.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Person","name","number","deletePerson","onClick","Notification","message","type","console","log","className","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Filter","props","value","filter","onChange","handler","PersonForm","handleName","handleNumber","add","Persons","persons","delPerson","map","person","toUpperCase","indexOf","key","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","setMessage","setType","useEffect","personService","InitialPersons","showMessage","setTimeout","event","target","preventDefault","personObject","some","window","confirm","find","p","changedPerson","updatePerson","catch","error","returnedPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7934e0da.chunk.js","sourcesContent":["import React from 'react'\n\n// Renders the details of a single person\n// Uses a table to keep website clean\nconst Person = ({ name, number, deletePerson }) => (\n\n    <tr>\n        <td>{name}</td> \n        <td>{number}</td>\n        <td>\n            <button onClick={deletePerson}>Delete</button>\n        </td>\n    </tr>\n)\n\nexport default Person","import React from 'react'\n\nconst Notification = ({message, type}) => {\n    if ( message === null)\n    {\n        return null\n    }\n    console.log(message)\n    return (\n        <div className={type}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/people'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst updateNumber = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst deletePerson = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request\n\n}\n\nexport default {\n    getAll,\n    create,\n    updateNumber,\n    deletePerson\n}","// WIP step 12\nimport React, { useState, useEffect } from 'react'\n\nimport Person from './components/Person'\nimport Notification from './components/Notification'\nimport personService from \"./services/persons\"\n\n// Creates the field for a filter\nconst Filter = (props) => {\n    return (\n        <>\n            filter shown with<input\n                value={props.filter}\n                onChange={props.handler}\n            >\n            </input>\n        </>\n    )\n}\n\n// Creates the input fields for receiving the name and number\nconst PersonForm = (props) => {\n    return (\n        <>\n            <form>\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>name: </td>\n                            <td><input \n                                value={props.name}\n                                onChange={props.handleName}\n                            /></td>\n                        </tr>\n                        <tr>\n                            <td>number: </td>\n                            <td><input \n                                value={props.number}\n                                onChange={props.handleNumber}\n                            /></td>\n                        </tr>\n                    </tbody>                    \n                </table>\n                <div>\n                    <button type=\"submit\"\n                            onClick={props.add}>\n                        add\n                    </button>\n                </div>\n            </form> \n        </>\n    )\n}\n\n\n\n// Renders all persons that fit into the filter\nconst Persons = ({ persons, filter, delPerson}) => {\n    return (\n        persons.map(person => {\n            if (person.name.toUpperCase().indexOf(filter.toUpperCase()) > -1)\n            {\n                return (\n                    <Person \n                        key={person.name} \n                        name={person.name} \n                        number={person.number} \n                        deletePerson={() => delPerson(person)}\n                    />\n               )\n            } else {\n                return null\n            }\n        })  \n    )\n    \n}\n\n\nconst App = () => {\n    const [ persons, setPersons] = useState([]) \n    const [ newName, setNewName ] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [filter, setFilter] = useState('')\n    const [message, setMessage] = useState(null)\n    const [type, setType] = useState('error')\n\n    let add = true\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then(InitialPersons => {\n                setPersons(InitialPersons)\n            })\n    }, [])\n\n    const showMessage = (type, message) => {\n        setType(type)\n        setMessage(message)\n        setTimeout(() => {\n            setMessage(null)\n        }, 5000)\n    }\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        const personObject = {\n            name: newName,\n            number: newNumber,\n        }\n        if(persons.some(person => person.name === newName))\n        {\n            if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`))\n            {\n                const person = persons.find(p => p.name === newName)\n                const changedPerson = {...person, number: newNumber}\n                personService\n                    .updateNumber(persons.find(p => p.name === newName).id, changedPerson)\n                    .then(updatePerson => {\n                        setPersons(persons.map(p => p.name !== newName ? p : changedPerson))\n                        showMessage('info', `'${updatePerson.name}' updated`)\n                    })\n                    .catch(error => {\n                        showMessage('error', error.response.data.error)\n                        setPersons(persons.filter(p => p.id !== person.id))\n                    })\n            } \n            add = false\n        } \n\n        if (add)\n        {\n            personService\n                .create(personObject)\n                .then(returnedPerson => {\n                    setPersons(persons.concat(returnedPerson))\n                    showMessage('info', `'${returnedPerson.name}' added`)\n                })\n                .catch(error => {\n                    console.log(error.response.data.error)\n                    showMessage('error', error.response.data.error)\n                })\n        }\n        setNewName('')\n        setNewNumber('')\n    }\n\n    const deletePerson = person => {\n        if (window.confirm(`Delete ${person.name}?`))\n        {\n            personService\n                .deletePerson(person.id)\n                .catch(error => {\n                    showMessage('error', `Error, ${person.name} does not exist on the server`)\n                })\n           \n                setPersons(persons.filter(p => p.id !== person.id))\n                showMessage('info', `'${person.name}' deleted`)\n              \n        }\n    }\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const handleFilterChange = (event) => {\n        setFilter(event.target.value)\n    }\n\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={message} type={type}/>\n            <Filter filter={filter} handler={handleFilterChange} />\n            <h3>Add new</h3>\n            \n            <PersonForm name={newName} handleName={handleNameChange}\n                number={newNumber} handleNumber={handleNumberChange}\n                add={addPerson} />\n            \n            <h3>Numbers</h3>\n            <table>\n                <tbody>\n                    <Persons \n                        persons={persons} \n                        filter={filter} \n                        delPerson={deletePerson}\n                    />\n                </tbody>\n            </table>\n            \n        </div>\n    )\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}